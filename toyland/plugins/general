#!/bin/sh

#--------------------------------------------------------------------
# General Variables
#--------------------------------------------------------------------

_W_DEVICE=${_W_DEVICE:-en0}

#--------------------------------------------------------------------
# General Utilities
#--------------------------------------------------------------------

case "$fn" in

    # Upgrade noddy  to the latest version
    "upgrade")
        if [ "$echocommand" == "true" ]; then
            echo "${GREEN}sh -c "$(curl -fsSL https://raw.githubusercontent.com/anmolnagpal/toyland/master/toyland/tools/update)"\n\n${NC}"
        fi
        sh -c "$(curl -fsSL https://raw.githubusercontent.com/anmolnagpal/toyland/master/toyland/tools/update)"
    ;;


    # Uninstall Mac  from your Mac
    "uninstall")
        if [ "$echocommand" == "true" ]; then
            echo "${GREEN}sh -c "$(curl -fsSL https://raw.githubusercontent.com/anmolnagpal/toyland/master/toyland/tools/uninstall)"\n\n${NC}"
        fi
        sh -c "$(curl -fsSL https://raw.githubusercontent.com/anmolnagpal/toyland/master/toyland/tools/uninstall)"
    ;;


    # Get macOS Info
    "info")
        printf "${GREEN}sw_vers\n${NC}"
        sw_vers
    ;;


    # Lock Mac
    "lock")
        if [ "$echocommand" == "true" ]; then
            echo "${GREEN}/System/Library/CoreServices/Menu\ Extras/User.menu/Contents/Resources/CGSession -suspend\n\n${NC}"
        fi
        /System/Library/CoreServices/Menu\ Extras/User.menu/Contents/Resources/CGSession -suspend
    ;;


    # Restart Mac
    "restart")
        if [ "$echocommand" == "true" ]; then
            echo "${GREEN}osascript -e 'tell app 'loginwindow' to «event aevtrrst»''\n\n${NC}"
        fi
        osascript -e 'tell app "loginwindow" to «event aevtrrst»'
    ;;


    # Sleep
    "sleep")
        if [ "$echocommand" == "true" ]; then
            echo "${GREEN}pmset sleepnow\n\n${NC}"
        fi
        pmset sleepnow
    ;;


    # Shutdown Mac
    "shutdown")
        if [ "$echocommand" == "true" ]; then
            echo "${GREEN}osascript -e 'tell app 'loginwindow' to «event aevtrsdn»'\n\n${NC}"
        fi
        osascript -e 'tell app "loginwindow" to «event aevtrsdn»'
    ;;


    # Prepare MAC for presentation: minimize all apps, send files from desktop and downloads to trash and set not disturb mode
    "presentation")

        # Close browsers
        killall -9 Safari
        killall -9 Google\ Chrome
        killall -9 firefox


        # Minimize all the windows
osascript <<'END'
tell application "System Events"
    repeat with p in every application process whose visible is true
        click (first button of every window of p whose role description is "minimize button")
    end repeat
end tell
END

        # Cleanup desktop and downloads
osascript >/dev/null <<'END'
tell application "System Events"
  set currentUser to (name of current user)
end tell
tell application "Finder"
try
  delete (every item of folder "Downloads" of folder currentUser of folder "Users" of startup disk)
end try
try
  delete (every item of folder "Desktop" of folder currentUser of folder "Users" of startup disk)
end try
end tell
END

        # Set not disturb mode
osascript >/dev/null <<'END'
try
	tell application "System Events"
		tell process "SystemUIServer"
			key down option
			click menu bar item "Notification Center" of menu bar 1
			key up option
		end tell
	end tell
end try
END

        # Restart notification center
        killall NotificationCenter
    ;;




    # Display clock in Terminal
    "clock")
        if [ "$echocommand" == "true" ]; then
            echo "${GREEN}while sleep 1;do tput sc;tput cup 0 $(($(tput cols)-29));date;tput rc;done &'\n\n${NC}"
        fi
        if [ -z "$(pgrep macClock)"   ]; then
            # naming the process
            ( exec -a macClock bash -c 'while sleep 1;do tput sc;tput cup 0 $(($(tput cols)-29));date;tput rc;done' &   )
        else
            pkill macClock
        fi
    ;;

    # Uptime
    "uptime")
        if [ "$echocommand" == "true" ]; then
            echo "${GREEN}uptime\n\n${NC}"
        fi
        uptime
    ;;


    # Remove files older than X days in current folder
    "files:remove-older")
        if [ "$echocommand" == "true" ]; then
            echo "${GREEN}find . -ctime +${GRAY}${firstParameter}${GREEN} -print0 | xargs -0 -n1\n\n${NC}"
        fi
        echo "Removing files older than "$firstParameter" days..."
        find . -ctime +$firstParameter -print0 | xargs -0 -n1
    ;;


    #List folders in current directory
    "folders:list")
        du -sk * | sort -rn
    ;;


    # Remove empty subdirectories
    "folders:remove-empty")
        if [ "$echocommand" == "true" ]; then
            echo "${GREEN}find . -type d -empty -delete\n\n${NC}"
        fi
        find . -type d -empty -delete
    ;;


    # Calculate folder size
    "folder:size")
        if [ "$echocommand" == "true" ]; then
            echo "${GREEN}du -sh .\n\n${NC}"
        fi
        echo "Calculating folder size..."
        echo "Folder size:"
        du -sh .
    ;;


    # Show hidden files
    "hidden:show")
        if [ "$echocommand" == "true" ]; then
            echo "${GREEN}defaults write com.apple.finder AppleShowAllFiles YES; killall Finder\n\n${NC}"
        fi
        defaults write com.apple.finder AppleShowAllFiles YES; killall Finder
    ;;


    # Hide hidden files
    "hidden:hide")
        if [ "$echocommand" == "true" ]; then
            echo "${GREEN}defaults write com.apple.finder AppleShowAllFiles NO; killall Finder\n\n${NC}"
        fi
        defaults write com.apple.finder AppleShowAllFiles NO; killall Finder
    ;;


    # Close all opened apps
    "apps:close-all")
        mac_cli_config=$HOME/.toyland
        ignore="grep\|iTerm\|Finder\|Dropbox\|Bartender"
        if [ -e $mac_cli_config ]; then
          source ${mac_cli_config}
          ignore="${ignore}\|${__MAC_CLI_IGNORE_APPS}"
        fi

        if [ "$echocommand" == "true" ]; then
            echo "${GREEN}ignore='$ignore'\n${NC}"
            echo "${GREEN}ps aux | grep /Applications | grep -v $ignore | sed "s/\ *\ /\ /g" | cut -d ' ' -f 2 | xargs -I X kill -9 X\n\n${NC}"
        fi
        # To customize ignored apps, just put the keywords in $ignore
        # or add a file called $HOME/.toyland and set the variable __MAC_CLI_IGNORE_APPS
        # To test which apps you are going to kill, run:
        # ps aux | grep /Applications | grep -v $ignore | sed "s/\ *\ /\ /g" | cut -d ' ' -f 11 | xargs -I X echo X
        ps aux | grep /Applications | grep -v "${ignore}" | sed "s/\ *\ /\ /g" | cut -d ' ' -f 2 | xargs -I X kill -9 X
    ;;


    # Add blank space to the dock
    "dock:add-space")
        echo "${GREEN}Added new blank space to the dock${NC}"
        defaults write com.apple.dock persistent-apps -array-add '{"tile-type"="spacer-tile";}'
        killall Dock
    ;;

    # Get list of installed apps from the App Store
    "apps:app-store")
        if [ "$echocommand" == "true" ]; then
            echo "${GREEN}find /Applications -path '*Contents/_MASReceipt/receipt' -maxdepth 4 -print |\sed 's#.app/Contents/_MASReceipt/receipt#.app#g; s#/Applications/##'\n\n${NC}"
        fi
        echo "Getting list of installed apps from the App Store..."
        find /Applications -path '*Contents/_MASReceipt/receipt' -maxdepth 4 -print |\sed 's#.app/Contents/_MASReceipt/receipt#.app#g; s#/Applications/##'
    ;;


    # Start screensaver
    "screensaver")
        if [ "$echocommand" == "true" ]; then
            echo "${GREEN}open -a /System/Library/Frameworks/ScreenSaver.framework/Versions/A/Resources/ScreenSaverEngine.app\n\n${NC}"
        fi
        open -a /System/Library/Frameworks/ScreenSaver.framework/Versions/A/Resources/ScreenSaverEngine.app
    ;;


    # Eject all mounted volumes and disk
    "eject-all")
        if [ "$echocommand" == "true" ]; then
            echo "${GREEN}osascript -e 'tell application 'Finder' to eject (every disk whose executable is true)'\n\n${NC}"
        fi
        osascript -e 'tell application "Finder" to eject (every disk whose executable is true)'
    ;;


    # Get battery information
    "battery")
        if [ "$echocommand" == "true" ]; then
            echo "${GREEN}pmset -g batt\n\n${NC}"
        fi
        pmset -g batt
    ;;

    # Search and replace string on file
    "search:replace")
        echo "Please enter the string to search on the file:"

        if [ ! -z "$firstParameter" -a "$firstParameter" != " " ]; then
            read searchString

            if [ ! -z "$searchString" -a "$searchString" != " " ]; then

                echo "Please enter the string that will replace the search string:"
                read replaceString

                if [ ! -z "$replaceString" -a "$replaceString" != " " ]; then

                    if [ "$echocommand" == "true" ]; then
                        echo "${GREEN}LC_CTYPE=C sed -i'' -e 's#${GRAY}${searchString}${GREEN}#${GRAY}${replaceString}${GREEN}#g' ${GRAY}${firstParameter}\n\n${NC}"
                    fi
                    LC_CTYPE=C sed -i'' -e 's#'"${searchString}"'#'"${replaceString}"'#g' $firstParameter

                else
                    "Please specify the string to replace"
                fi

            else
                "Please specify the string to search"
            fi
        else
            echo "Please specify the file to perform the search and replace operation"
            echo "E.g.: search:replace /path/to/file.csv"
        fi
    ;;


esac
